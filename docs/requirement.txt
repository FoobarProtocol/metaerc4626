Create a comprehensive Solidity smart contract that implements an ERC4626-compliant vault with a vesting schedule mechanism. The contract should facilitate token deposits and withdrawals, incorporate a vesting schedule that releases tokens over time, and accurately track the total available assets, considering both free (immediately available) and vesting assets. Ensure that the contract includes reentrancy protection and correctly calculates shares-to-assets and assets-to-shares conversions in line with ERC4626 specifications.  **Vesting Schedule Requirements:**  1. **Vesting Duration:** Set the total vesting period to 12 months. 2. **Release Intervals:** Implement monthly release intervals, where 1/12th of the vested tokens become available at the end of each month. 3. **Cliff Period:** Include a 3-month cliff period, during which no tokens are released. After the cliff, tokens vest monthly. 4. **Release Mechanism:** Implement a linear vesting mechanism where tokens are released gradually over the vesting period. 5. **Start Time:** Vesting begins at the time of the initial deposit.  **Administrative Functions and Access Control:**  1. **Set Vesting Parameters:** Include functions to update vesting parameters, such as duration and intervals, which should be restricted to the contract owner or administrators. 2. **Pause Contract:** Implement a function to pause and unpause the contract in case of emergencies, restricted to administrators. 3. **Access Management:** Use OpenZeppelin's `Ownable` or `AccessControl` to manage administrative permissions securely.  **Additional Project Requirements**   - Implement the Vault contract using OpenZeppelin libraries. - Inherit from `ReentrancyGuard` and use `Ownable` or `AccessControl` for access management. - Include functions for deposit, withdrawal, balance queries, and vesting schedule retrieval. - Develop a separate Vesting contract or library to handle custom vesting logic. - Integrate with the Vault contract to manage vesting schedule updates and calculations. - Define an interface for the Vault contract, specifying functions for deposits, withdrawals, balance checks, and vesting schedule queries. - Define an interface for the Vesting contract, including functions to calculate vested and unvested amounts. - Implement unit tests for the Vault contract, covering deposit, withdrawal, and vesting schedule management functionalities. - Implement unit tests for the Vesting contract, focusing on calculations of vested and unvested amounts.